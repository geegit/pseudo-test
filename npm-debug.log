0 info it worked if it ends with ok
1 verbose cli [ '/usr/local/bin/node', '/usr/local/bin/npm', 'publish' ]
2 info using npm@2.14.7
3 info using node@v4.2.1
4 verbose publish [ '.' ]
5 silly cache add args [ '.', null ]
6 verbose cache add spec .
7 silly cache add parsed spec Result {
7 silly cache add   raw: '.',
7 silly cache add   scope: null,
7 silly cache add   name: null,
7 silly cache add   rawSpec: '.',
7 silly cache add   spec: '/Users/gregadmin/projects/pseudo-test',
7 silly cache add   type: 'directory' }
8 verbose addLocalDirectory /Users/gregadmin/.npm/pseudo-test/1.1.6/package.tgz not in flight; packing
9 verbose tar pack [ '/Users/gregadmin/.npm/pseudo-test/1.1.6/package.tgz',
9 verbose tar pack   '/Users/gregadmin/projects/pseudo-test' ]
10 verbose tarball /Users/gregadmin/.npm/pseudo-test/1.1.6/package.tgz
11 verbose folder /Users/gregadmin/projects/pseudo-test
12 info prepublish pseudo-test@1.1.6
13 verbose addLocalTarball adding from inside cache /Users/gregadmin/.npm/pseudo-test/1.1.6/package.tgz
14 silly cache afterAdd pseudo-test@1.1.6
15 verbose afterAdd /Users/gregadmin/.npm/pseudo-test/1.1.6/package/package.json not in flight; writing
16 verbose afterAdd /Users/gregadmin/.npm/pseudo-test/1.1.6/package/package.json written
17 silly publish { name: 'pseudo-test',
17 silly publish   description: 'testtool for rest',
17 silly publish   version: '1.1.6',
17 silly publish   author: { name: 'Gregory Jones' },
17 silly publish   contributors: [],
17 silly publish   keywords:
17 silly publish    [ 'mocha',
17 silly publish      'test',
17 silly publish      'bdd',
17 silly publish      'tdd',
17 silly publish      'rest',
17 silly publish      'pseudo',
17 silly publish      'pseudo-test',
17 silly publish      'tap' ],
17 silly publish   dependencies:
17 silly publish    { caching: '^0.1.4',
17 silly publish      chalk: '^1.1.1',
17 silly publish      config: '~1.12.0',
17 silly publish      'email-validator': '~1.0.1',
17 silly publish      'find-parent-dir': '^0.3.0',
17 silly publish      moment: '2.8.2',
17 silly publish      'node-sync': '^0.1.0',
17 silly publish      parentpath: '^0.2.0',
17 silly publish      request: '^2.69.0',
17 silly publish      sync: '^0.2.5',
17 silly publish      underscore: '^1.6.0',
17 silly publish      xml2js: '^0.4.16' },
17 silly publish   repository: { type: 'git', url: 'https://github.com/geegit/pseudo-test' },
17 silly publish   devDependencies: { mocha: '*' },
17 silly publish   bin: { ptest: './bin/ptest.sh', pseudo: './bin/ptest.sh' },
17 silly publish   engines: { node: '0.10.36' },
17 silly publish   scripts: { start: 'app.js' },
17 silly publish   readme: '# Pseudo Test\nIf you need to confirm that your XML or JSON API is behaving as expected, this module is for you.\n### Test API routes using plain English\n```bash\n# Verify that API saves accounts as expected\nPOST 200 http://myapi.com/user WITH BODY {"firstName":\'JP\', "lastName":\'Berd\'}\nTEST {"id":"10000","firstName":"JP","lastName":"Berd"} EQUALS RESPONSE.body \n```\n\n### ...and say goodbye to this\n\n\n```js\n//wth!!!, I have a deadline. Who can write this much code just to test?????\nvar url = \'http://myapi.com\';\nit(\'should correctly update an existing account\', function(done){\n  var body = {\n    firstName: \'JP\',\n    lastName: \'Berd\'\n  };\n  request(url)\n    .post(\'/user\')\n    .send(body)\n    .expect(\'Content-Type\', /json/)\n    .expect(200) //Status code\n    .end(function(err,res) {\n      if (err) {\n        throw err;\n      }\n      // Should.js fluent syntax applied\n      res.body.should.have.property(\'_id\');\n                  res.body.should.have.property(\'firstName\');\n                  res.body.should.have.property(\'lastName\');\n                  res.body.should.have.property(\'creationDate\');\n                  res.body.creationDate.should.not.equal(null);\n      done();\n    });\n  });\n  })\n  ```\n## Additional Commands\nIntentionally kept small.  The point is to test your code and not learn a verbose language in the process\n \n|                          Command                         |                                                Description                                               |\n|:--------------------------------------------------------|--------------------------------------------------------------------------------------------------------|\n| SET HEADER ["key":"value"]                                   | Used to set custom http headers.                                              |\n| SET VAR(IABLE) [var] = [value]                                   | Set a local variable for use later      |\n```\n    SET HEADER "authkey":"1234"\n    SET VAR hostvar = http://jsonplaceholder.typicode.com\n    #Alternate form, more english like\n    Set variable hostvar = http://jsonplaceholder.typicode.com\n```\n|                          Command                         |                                                Description                                               |\n|:--------------------------------------------------------|--------------------------------------------------------------------------------------------------------|\n| GET\\|POST\\|PUT\\|DELETE [HTTP.code] [URL] (WITH BODY [any valid json]) | Execute HTTP Request and break if HTTP response code does not match user specified HTTP.code|\n```\n    PUT 200 ${hostvar}/user/1 WITH BODY {"id":"1","name":"Brent"}\n    GET 200 ${hostvar}/users\n```\n    \n|                          Command                         |                                                Description                                               |\n|:--------------------------------------------------------|--------------------------------------------------------------------------------------------------------|\n| RESPONSE.body                                            | Last successful HTTP response.body.                                                                     |\n                                                                                     | \n| TEST [condition]                           | If test condition fails, break   |\n| TEST [obj] EQUALS [obj]                          | Test that two objects/arrays are equal. This is includes checking for expected type AND value for each member AND attribute                                |\n| TEST [obj] IS LIKE [obj]                         | Test two objects against each other. Only verify that attribute name and type of value match |\n```\n    TEST RESPONSE.body[0].name == "Brent"\n    #Strict test.  Response body must exactly match the expected result\n    TEST RESPONSE.body[1] EQUALS {id: 1,name: "Leanne Graham",username: "Lgraham"}\n    #lazy test. Response body must have same keys and types of values only\n    TEST RESPONSE.body[1] IS LIKE {id: 9999,name: "blah blah",username: "foo"}\n```\n|                          Command                         |                                                Description                                               |\n|:--------------------------------------------------------|--------------------------------------------------------------------------------------------------------|\n|DEBUG [any valid expression]                                | Echo string to console                                     |\n| LOOP [list] AS [var] [test to execute] ENDLOOP                             | Iterate over list and execute all test(s) against each member of the list.  Break if failure.                                                       |\n```\n    GET 200 http://jsonplaceholder.typicode.com/users\n    DEBUG "Number of users is ${RESPONSE.body[0]length}"\n    #Perform a couple of tests against each user returned in json array\n    LOOP RESPONSE.body AS user\n        TEST user.email != null\n        TEST typeof user.id == "number"\n    ENDLOOP \n```      \n### Latest Updates\n Version                         |                                                Change                                               |\n|:--------------------------------------------------------|--------------------------------------------------------------------------------------------------------\n| 1.1.5                                 | SETVAR command removed.  Use SET VAR instead\n| 1.1.4                                 | Commands are now case insensitive.  \n| 1.1.4                                 | LOOP command added\n| 1.1.4 |   SET VAR(iable) command added\n\n\n### How Can I get Started?\n\n#### 1.) Install from npm\n```bash\nnpm install --save pseudo-test\n```\n#### 2.) Edit package.json and add the following snippet to the scripts section\n``` bash\n  "scripts": {\n    "ptest": "./node_modules/.bin/ptest"\n  }\n  ```\n#### 3) Save Test Case to [your project directory]/tests/myexample.test\n##### Any files with *.test extension will be run\n\n```bash\n\n# My First Test Case <myexample.test>\n# I\'m testing that I receive a 200 from the user service\n GET 200 http://jsonplaceholder.typicode.com/users/1\n  \n# Pro-tip: HTTP response is saved to global RESPONSE.body Object\n# Access global object to test some conditions\n    TEST RESPONSE.body.username == "Bret" && typeof RESPONSE.body.id == "number"\n    \n# Or Compare a test object to the entire RESPONSE.body for exact match\n    SETVAR mytestobject = {id:1,name:"Leanne Graham",username:"Bret",email:"Sincere@april.biz",address:{street:"Kulas Light",suite:"Apt. 556",city:"Gwenborough",zipcode:"92998-3874",geo:{lat:"-37.3159",lng:"81.1496"}},phone:"1-770-736-8031 x56442",website:"hildegard.org",company:{name:"Romaguera-Crona",catchPhrase:"Multi-layered client-server neural-net",bs:"harness real-time e-markets"}}\n    \n    TEST mytestobject EQUALS RESPONSE.body\n    \n#Pro-tip: Use TEST [someobj] IS LIKE RESPONSE.body to compare only key names and value types\n    # TEST mytestobject IS LIKE RESPONSE.body\n```\n#### 4) Run the Test(s)\n```bash\nnpm run ptest\n````\n#### 5) View The Output...Did it pass?\n``` bash\n\nRunning test for file /Users/gregadmin/projects/cn-anything/tests/myexample.test\nCalling URL http://jsonplaceholder.typicode.com/users/1\nhttp_jsonplaceholder_typicode_com_users_1\nExpecting a user specified response statusCode [200]\ncontent-type is application/json; charset=utf-8\nEvaluating RESPONSE.body.username == "Bret" && typeof RESPONSE.body.id == "number"\nfuzzy match is false\nComparing objects [object Object]==> to [object Object]==> with key [address] testForFieldTypeOnly flag is false\nComparing objects Gwenborough==> to Gwenborough==> with key [city] testForFieldTypeOnly flag is false\nComparing objects [object Object]==> to [object Object]==> with key [geo] testForFieldTypeOnly flag is false\nComparing objects -37.3159==> to -37.3159==> with key [lat] testForFieldTypeOnly flag is false\nComparing objects 81.1496==> to 81.1496==> with key [lng] testForFieldTypeOnly flag is false\nComparing objects Kulas Light==> to Kulas Light==> with key [street] testForFieldTypeOnly flag is false\nComparing objects Apt. 556==> to Apt. 556==> with key [suite] testForFieldTypeOnly flag is false\nComparing objects 92998-3874==> to 92998-3874==> with key [zipcode] testForFieldTypeOnly flag is false\nComparing objects [object Object]==> to [object Object]==> with key [company] testForFieldTypeOnly flag is false\nComparing objects harness real-time e-markets==> to harness real-time e-markets==> with key [bs] testForFieldTypeOnly flag is false\nComparing objects Multi-layered client-server neural-net==> to Multi-layered client-server neural-net==> with key [catchPhrase] testForFieldTypeOnly flag is false\nComparing objects Romaguera-Crona==> to Romaguera-Crona==> with key [name] testForFieldTypeOnly flag is false\nComparing objects Sincere@april.biz==> to Sincere@april.biz==> with key [email] testForFieldTypeOnly flag is false\nComparing objects 1==> to 1==> with key [id] testForFieldTypeOnly flag is false\nComparing objects Leanne Graham==> to Leanne Graham==> with key [name] testForFieldTypeOnly flag is false\nComparing objects 1-770-736-8031 x56442==> to 1-770-736-8031 x56442==> with key [phone] testForFieldTypeOnly flag is false\nComparing objects Bret==> to Bret==> with key [username] testForFieldTypeOnly flag is false\nComparing objects hildegard.org==> to hildegard.org==> with key [website] testForFieldTypeOnly flag is false\nOverall Status : ALL TESTS PASSED\n```\n                      \n\n### Known Limitations\n-- Multi-line commands are not supported.\n\n-- Use ${varname} syntax if your variables will be enclosed in quotes\n\nEx. DEBUG "First Person is ${RESPONSE.body[0].name}"\n\n### Pro-tip: Underscore.js functions are available in all tests\n```bashU\n# Call underscore.js library _.sortBy and _.difference to make my life easier\n# Test that my REST API /sort route works correctly\n# http://underscorejs.org/\n  \nSET VAR sortedArray = _.sortBy([3,4,6,1,2,5],function(num){return num})\n  \nGET 200 http://myservice/sort WITH BODY [3,4,6,1,2,5]\n\nTEST _.difference(sortedArray,RESPONSE.body) == []\n\nDEBUG RESPONSE.body\n\n  ```\n### Advanced Usage Example(s)\n\n```bash\n  # Compare a JSON string to the response body \n\n  # Note: Nested objects are also supported.\n\n  GET 200 http://video-api.cartoonnetwork.com/version\n\n  TEST {name: "cn-go-api","version":"3.1.48"} EQUALS RESPONSE.body\n  .....\n  \n  npm run ptest\nRunning TEST {name: "cn-go-api","version":"3.1.48"} EQUALS RESPONSE.body\nError processing the following action on line 32 of /projectx/tests/versioncheck.test\nTEST {name: "cn-go-api","version":"3.1.48"} EQUALS RESPONSE.body\nError: Value of attribute [version==>3.1.48] does not match value of second object [version ==>3.1.47]\n\n  ...\n  # Set less strict checking.  I only care that the each object\'s\n  # keys match and the values are the correct type.\n  # Actual value for each key does not matter\n  TEST {name: "cn-go-api","version":"3.1.48"} IS LIKE RESPONSE.body\n  \n  ...\n  \n  npm run ptest\n  Running TEST {name: "cn-go-api","version":"3.1.48"} IS LIKE RESPONSE.body\n  ALL TESTS PASSED\n```\n### Pro-Tip: ENABLE GIT HOOKS\nSetup your project to reject commits to git repo if your latest code changes cause a test to fail\n```bash\n\n# copy this file to [your project directory]/.git/hooks/pre-commit\n# make it executable by typing chmod +x pre-commit\n#!/bin/bash\nkillall node\nPORT="${PORT:-3000}"\n\necho \'Starting local server at http://localhost and PORT\' $PORT\nnode app.js &\nsleep 2\nnode node_modules/pseudo-test/app.js\nkillall node\n\n```\n##### Attempting a commit automatically runs tests and rejects commit it tests fail\n``` bash\n  git commit -m "I made a quick change and I\'m sure it works"\n\n  Running TEST {duration: "200","version":"3.1.47"} EQUALS ${RESPONSE.body}\n  Error processing the following action on line 32 of ~/myapi/tests/oldbusinessrules.test\n  TEST {duration: "200","version":"3.1.47"} EQUALS RESPONSE.body\n\n  Error: Encountered attribute in this object which is not the same attribute type in comparison object\n  duration is [number] in first object while duration attribute in second object is of type [string]\n  COMMIT ABORTED : FIX BUG AND TRY AGAIN\n  ```\n',
17 silly publish   readmeFilename: 'README.md',
17 silly publish   gitHead: 'b7e4ac0d9d6c431ca2c93b8ee3633227f1fd665f',
17 silly publish   bugs: { url: 'https://github.com/geegit/pseudo-test/issues' },
17 silly publish   homepage: 'https://github.com/geegit/pseudo-test',
17 silly publish   _id: 'pseudo-test@1.1.6',
17 silly publish   _shasum: 'ef303c521e75bf02b554dee85dd4196878637680',
17 silly publish   _from: '.' }
18 verbose getPublishConfig undefined
19 silly mapToRegistry name pseudo-test
20 silly mapToRegistry using default registry
21 silly mapToRegistry registry https://registry.npmjs.org/
22 silly mapToRegistry uri https://registry.npmjs.org/pseudo-test
23 verbose publish registryBase https://registry.npmjs.org/
24 silly publish uploading /Users/gregadmin/.npm/pseudo-test/1.1.6/package.tgz
25 verbose request uri https://registry.npmjs.org/pseudo-test
26 verbose request sending authorization for write operation
27 info attempt registry request try #1 at 4:42:55 AM
28 verbose request id d33125f832a9ad9f
29 http request PUT https://registry.npmjs.org/pseudo-test
30 http 403 https://registry.npmjs.org/pseudo-test
31 verbose headers { 'content-type': 'application/json',
31 verbose headers   'cache-control': 'max-age=300',
31 verbose headers   'content-length': '95',
31 verbose headers   'accept-ranges': 'bytes',
31 verbose headers   date: 'Thu, 10 Mar 2016 09:42:56 GMT',
31 verbose headers   via: '1.1 varnish',
31 verbose headers   connection: 'keep-alive',
31 verbose headers   'x-served-by': 'cache-jfk1035-JFK',
31 verbose headers   'x-cache': 'MISS',
31 verbose headers   'x-cache-hits': '0',
31 verbose headers   'x-timer': 'S1457602975.379312,VS0,VE1025' }
32 verbose request invalidating /Users/gregadmin/.npm/registry.npmjs.org/pseudo-test on PUT
33 error publish Failed PUT 403
34 verbose stack Error: "You cannot publish over the previously published version 1.1.6." : pseudo-test
34 verbose stack     at makeError (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:264:12)
34 verbose stack     at CachingRegistryClient.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:252:14)
34 verbose stack     at Request._callback (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:172:14)
34 verbose stack     at Request.self.callback (/usr/local/lib/node_modules/npm/node_modules/request/request.js:198:22)
34 verbose stack     at emitTwo (events.js:87:13)
34 verbose stack     at Request.emit (events.js:172:7)
34 verbose stack     at Request.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:1063:14)
34 verbose stack     at emitOne (events.js:82:20)
34 verbose stack     at Request.emit (events.js:169:7)
34 verbose stack     at IncomingMessage.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:1009:12)
35 verbose statusCode 403
36 verbose pkgid pseudo-test
37 verbose cwd /Users/gregadmin/projects/pseudo-test
38 error Darwin 14.5.0
39 error argv "/usr/local/bin/node" "/usr/local/bin/npm" "publish"
40 error node v4.2.1
41 error npm  v2.14.7
42 error code E403
43 error "You cannot publish over the previously published version 1.1.6." : pseudo-test
44 error If you need help, you may report this error at:
44 error     <https://github.com/npm/npm/issues>
45 verbose exit [ 1, true ]
